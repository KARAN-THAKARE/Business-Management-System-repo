import sqlite3

from comconfigurationExe.configuration.generator import *

def EXE_CONFIGUARTION_SPACETRS_MODEM_CLIENT_IP_DETECTOR_METHOD():
    RESULT={}

    con = sqlite3.connect("IMSConfig.db")
    con.row_factory = sqlite3.Row
    cur = con.cursor()

    try:
        cur.execute("SELECT * FROM config")
        DATA = cur.fetchall()
        for EACH_AUTH_KEY in DATA:
            AUTHENTICATION1=str(EACH_AUTH_KEY[0])
            AUTHENTICATION2=str(EACH_AUTH_KEY[1])
            AUTHENTICATION3=str(EACH_AUTH_KEY[2])
            AUTHENTICATION4=str(EACH_AUTH_KEY[3])

        ENCODING_LIST = ENCODING_LIST_APPENED_METHOD(AUTHENTICATION1,AUTHENTICATION2,AUTHENTICATION3,AUTHENTICATION4)

        AUTHENTICATION_KEY_GENERATOR_MODULE_INITIAL_ID=AUTHENTICATION_KEY_GENERATOR_MODULE_INITIAL_METHOD(ENCODING_LIST)

        AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD=AUTHENTICATION_KEY_GENERATOR_MODULE_END_METHOD(ENCODING_LIST)

        GET_SYSTEM_UNIQUENESS_ARTIFACT_ID=CHECK_SYSTEM_UNIQUENESS_ARTIFACT_METHOD()

        RESULT=CHECK_SYSTEM_AUTHENTICATION_ARTIFACT_METHOD(GET_SYSTEM_UNIQUENESS_ARTIFACT_ID,AUTHENTICATION_KEY_GENERATOR_MODULE_INITIAL_ID,AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD)

    except Exception as e:
        print(e)
        RESULT["isSuccess"]=False
        RESULT["StatusCode"]="00x0F3A"

    return RESULT


DECRYPT_KEY_AUTHENTICATION=True
DECRYPT_MODEM_AUTHENTICATION=True
SOFTWARE_AUTH_KEY_CHECK=False
ENCRYPT_KEY_AUTHENTICATION=True
ENCRYPT_MODEM_AUTHENTICATION=True
GOOGLE_AUTH_ONE="00x020ATIVE"
SOFTWARE_AUTH_MODEM_CHECK=False
SPACETERS_POLICY_CHECK=True
GOOGLE_AUTH_TWO="00x0F1UNDBFRTME"
CLIENT_POLICY_CHECK=True
MEMBERSHIP_COMPLIANCE=True
GOOGLE_AUTH_THREE="00x0F1SHTALL"
DEPLOY_WAR_FILE_CONFIG=False
CLIENT_COMPLIANCE_CONFIGURATION_DETECT_METHODOLOGY=True
GOOGLE_AUTHENTICATION_BUIT_WAR=True
SOFTWARE = "isSuccess"
HARDWARE = "StatusCode"



def EXE_CONFIGUARTION_SPACETRS_MODEM_CLIENT_IP_DETECTOR_GET_DD_METHOD():
    con = sqlite3.connect("IMSConfig.db")
    con.row_factory = sqlite3.Row
    cur = con.cursor()
    try:
        cur.execute("SELECT * FROM config")
        DATA = cur.fetchall()
        for EACH_AUTH_KEY in DATA:
            AUTHENTICATION1=str(EACH_AUTH_KEY[0])
            AUTHENTICATION2=str(EACH_AUTH_KEY[1])
            AUTHENTICATION3=str(EACH_AUTH_KEY[2])
            AUTHENTICATION4=str(EACH_AUTH_KEY[3])
        ENCODING_LIST = ENCODING_LIST_APPENED_METHOD(AUTHENTICATION1,AUTHENTICATION2,AUTHENTICATION3,AUTHENTICATION4)
        AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD=AUTHENTICATION_KEY_GENERATOR_MODULE_END_METHOD(ENCODING_LIST)
        AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD = dt.strptime(AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD,"%m/%Y/%d")
        AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD = dt.strftime(AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD,"%d %B %Y")
    except Exception as e:
        AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD=""


    return AUTHENTICATION_KEY_GENERATOR_MODULE_END_DD
